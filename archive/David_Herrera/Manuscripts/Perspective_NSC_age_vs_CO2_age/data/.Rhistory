xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Starving trees")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3, alpha=0.6)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3, alpha=0.9)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
30/4
24*100/1000
60*100/3000
13*100/500
money_to_Transfer=1000
rate_of_change=4363
wise_fee=money_to_Transfer*0.025
wise_fee
word_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer
world_remit_rate_of_change=4286
world_remit_fee-1.99
wise_rate_of_change=rate_of_change
money_to_Transfer=1000
rate_of_change=4363
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
word_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer
word_remit_cost_pesos
rate_of_change - world_remit_rate_of_change
word_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
word_remit_cost_pesos
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_cost_euros
money_to_Transfer-world_remit_fee
world_remit_moeny_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
world_remit_moeny_in_banck
money_to_Transfer=1000
rate_of_change=4363
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
money_in_banck=as.data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck
money_to_Transfer=4000
rate_of_change=4363
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck
rate_of_change=4365
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck
money_to_Transfer=2000
rate_of_change=4540
world_remit_rate_of_change=4414
world_remit_fee=2.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
remitly_rate_of_change=4442
remitly_fees=2.99
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(2.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
remitly_cost_pesos=(rate_of_change - remitly_rate_of_change)*money_to_Transfer+(remitly_fees*rate_of_change)
remitly_cost_euros=remitly_cost_pesos/rate_of_change
remitly_money_in_bank=(money_to_Transfer-remitly_fees)*remitly_rate_of_change
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck,
remitly=remitly_money_in_bank)
money_in_banck
wilcox.test?
?wilcox.test
install.packages(c("backports", "bayestestR", "BH", "bitops", "boot", "brew", "brio", "broom", "Cairo", "callr", "car", "carData", "caTools", "chron", "class", "clipr", "cluster", "coda", "codetools", "colorspace", "commonmark", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "desc", "deSolve", "devtools", "diffobj", "digest", "doSNOW", "dplR", "dplyr", "DT", "effectsize", "ellipsis", "evaluate", "expm", "fansi", "farver", "FME", "forcats", "foreach", "formatR", "fs", "generics", "ggfortify", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggsignif", "gh", "git2r", "glue", "goftest", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "insight", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lme4", "lubridate", "magick", "magrittr", "maptools", "markdown", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "minpack.lm", "minqa", "modelr", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "overlapping", "parameters", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "polynom", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcarbon", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "remotes", "reprex", "reshape2", "rex", "rio", "rlang", "rmarkdown", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstatix", "rstudioapi", "rversions", "rvest", "scales", "selectr", "sensitivity", "sessioninfo", "sets", "shiny", "signal", "snow", "sourcetools", "sp", "SparseM", "spatial", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tiff", "tinytex", "usethis", "utf8", "viridis", "viridisLite", "waldo", "webshot", "whisker", "withr", "xfun", "XML", "xml2", "yaml", "zip"))
df1=as.data.frame(a=1,2,5,6, b=2,6,8,9)
df1=as.data.frame(a=c(1,2,5,6), b=c(2,6,8,9))
df1=as.data.frame(a =c(1,2,5,6), b=c(2,6,8,9))
df1=data.frame(a =c(1,2,5,6), b=c(2,6,8,9))
max_a=max(df1$a)
df2=df1/max_a
View(df1)
View(df2)
View(df1)
View(df2)
View(df1)
library("SoilR")
library("tidyverse")
library("ggplot2")
setwd("/Users/_dherrera/Documents/balzan_project/Perspective_NSC_age_vs_CO2_age/data")
#################
C14_respired_CO2_July_2018=read.csv("Tanguro_14C_/14C_respired_CO2_July_2018.csv",
header = T, sep = ",")
names(C14_respired_CO2_July_2018)[2]="Id"
C14_respired_CO2_July_2018=C14_respired_CO2_July_2018[,-c(10)]
str(C14_respired_CO2_July_2018)
################
C14_respired_CO2_May_2019=read.csv("Tanguro_14C_/14C_respired_CO2_May_2019.csv",
header = T, sep = ",")
str(C14_respired_CO2_May_2019)
C14_respired_CO2_May_2019=separate(C14_respired_CO2_May_2019, Probe, c("Id", "sp"))
C14_respired_CO2_May_2019=C14_respired_CO2_May_2019[,-c(3)]
str(C14_respired_CO2_May_2019)
################
C14_sugars_July_2018=read.csv("Tanguro_14C_/14C_sugars_July_2018.csv",
header = T, sep = ",")
C14_sugars_July_2018=C14_sugars_July_2018[-c(15:17),-c(10)]
C14_sugars_July_2018=C14_sugars_July_2018%>%separate(Probe, c("Sp_id", "Id"))
C14_sugars_July_2018=C14_sugars_July_2018[,-c(2)]
str(C14_sugars_July_2018)
################
C14_sugars_May_2018=read.csv("Tanguro_14C_/14C_sugars_May_2019.csv",
header = T, sep = ",")
C14_sugars_May_2018=C14_sugars_May_2018[-c(22:25),-c(10)]
#################
C14_respired_CO2_July_2018=read.csv("Tanguro_14C_/14C_respired_CO2_July_2018.csv",
header = T, sep = ",")
setwd("/Users/_dherrera/Documents/balzan_project/Perspective_NSC_age_vs_CO2_age/data")
setwd("/Users/_dherrera/Documents/Yale_2024/Manuscripts/Perspective_NSC_age_vs_CO2_age/data")
#################
C14_respired_CO2_July_2018=read.csv("Tanguro_14C_/14C_respired_CO2_July_2018.csv",
header = T, sep = ",")
names(C14_respired_CO2_July_2018)[2]="Id"
C14_respired_CO2_July_2018=C14_respired_CO2_July_2018[,-c(10)]
str(C14_respired_CO2_July_2018)
################
C14_respired_CO2_May_2019=read.csv("Tanguro_14C_/14C_respired_CO2_May_2019.csv",
header = T, sep = ",")
str(C14_respired_CO2_May_2019)
C14_respired_CO2_May_2019=separate(C14_respired_CO2_May_2019, Probe, c("Id", "sp"))
C14_respired_CO2_May_2019=C14_respired_CO2_May_2019[,-c(3)]
str(C14_respired_CO2_May_2019)
################
C14_sugars_July_2018=read.csv("Tanguro_14C_/14C_sugars_July_2018.csv",
header = T, sep = ",")
C14_sugars_July_2018=C14_sugars_July_2018[-c(15:17),-c(10)]
C14_sugars_July_2018=C14_sugars_July_2018%>%separate(Probe, c("Sp_id", "Id"))
C14_sugars_July_2018=C14_sugars_July_2018[,-c(2)]
str(C14_sugars_July_2018)
################
C14_sugars_May_2018=read.csv("Tanguro_14C_/14C_sugars_May_2019.csv",
header = T, sep = ",")
C14_sugars_May_2018=C14_sugars_May_2018[-c(22:25),-c(10)]
C14_sugars_May_2018=C14_sugars_May_2018%>%separate(Probe, c("Id", "Tree_sample", "depth", sep="-"))
C14_sugars_May_2018_1=C14_sugars_May_2018[c(1:12),-c(2)]
C14_sugars_May_2018_2=C14_sugars_May_2018[c(13:21),-c(5)]
names(C14_sugars_May_2018_1)=names(C14_sugars_May_2018_2)
C14_sugars_May_2018=rbind(C14_sugars_May_2018_1, C14_sugars_May_2018_2)
C14_sugars_May_2018=C14_sugars_May_2018[-c(3),]
str(C14_sugars_May_2018)
ID_two_depth=filter(as.data.frame(table(C14_sugars_May_2018$Id)), Freq==2)
C14_sugars_May_2018_two_depths=filter(C14_sugars_May_2018, Id%in%ID_two_depth$Var1)
C14_sugars_May_2018_depth_one=filter(C14_sugars_May_2018, !Id%in%ID_two_depth$Var1 & depth==2)
C14_sugars_May_2018_depth_two=filter(C14_sugars_May_2018, !Id%in%ID_two_depth$Var1 & depth==4)
C14_sugars_May_2018_summarised_two_depths=
C14_sugars_May_2018_two_depths %>%group_by(Id)%>%
summarise(P.Nr.=first(P.Nr.),
species=first(species),
Compound=first(Compound),
Date=first(Date),
F14C_mean=mean(F14C, na.rm=T),
err_F14C_mean=mean(err_F14C, na.rm=T),
D14C_mean=mean(D14C, na.rm=T),
err_D14C_mean=mean(err_D14C, na.rm=T),
F14C_2=first(F14C),
F14C_4=last(F14C),
D14C_2=first(D14C),
D14C_4=last(D14C),
F14C_perc_mean=F14C_mean/F14C_2,
F14C_perc_mean2=F14C_mean/F14C_4,
D14C_perc_mean=D14C_mean/D14C_2
)
mean_factor_1=mean(C14_sugars_May_2018_summarised_two_depths$F14C_perc_mean[-4])
mean_factor_2=mean(C14_sugars_May_2018_summarised_two_depths$F14C_perc_mean2[-4])-0.02
C14_sugars_May_2018_depth_one$F14C=C14_sugars_May_2018_depth_one$F14C
C14_sugars_May_2018_depth_one=C14_sugars_May_2018_depth_one[,-c(3,4)]
C14_sugars_May_2018_depth_two$F14C=C14_sugars_May_2018_depth_two$F14C*mean_factor_2
C14_sugars_May_2018_depth_two=C14_sugars_May_2018_depth_two[,-c(3,4)]
C14_sugars_May_2018_two_depths_averaged=C14_sugars_May_2018_summarised_two_depths%>%
select(P.Nr., Id, species, Compound, Date, F14C_mean, err_F14C_mean, D14C_mean, err_D14C_mean)
names(C14_sugars_May_2018_two_depths_averaged)=names(C14_sugars_May_2018_depth_two)
########### D14C has not been adjusted for the samples that only had the 2-4 deepth analyzed. work only with the F14C values that were corrected.
C14_sugars_May_2018_averaged=rbind(C14_sugars_May_2018_two_depths_averaged,
C14_sugars_May_2018_depth_one,
C14_sugars_May_2018_depth_two)
str(C14_sugars_May_2018_averaged)
C14_sugars_May_2018_averaged=as.data.frame(C14_sugars_May_2018_averaged)
calib_curv=Hua2021$SHZone3
calib_curv=filter(Hua2021$SHZone3, Year>1964)
max(calib_curv[,4])
min(calib_curv[,4])
plot(calib_curv$Year, calib_curv$mean.F14C)
calibrating_F14C_to_calendar_dates=function(df, calcurve){##df must me a data frame with the F14 and errors data in teh second and third column respectively
df$calibrated_dates=NA
for(i in 1:nrow(df)){
possible_Dates=filter(calcurve, mean.F14C>(df[i,c("F14C")]-df[i,c("err_F14C")]) & mean.F14C<(df[i,c("F14C")]+df[i,c("err_F14C")]))
if(nrow(possible_Dates)==0){
df$calibrated_dates[i]=2253.3-230.8*df$F14C[i]
}else{
df$calibrated_dates[i]=mean(possible_Dates[,1])
}
}
return(df)
}
C14_respired_CO2_July_2018_callibrated=calibrating_F14C_to_calendar_dates(C14_respired_CO2_July_2018, calib_curv)
C14_respired_CO2_July_2018_callibrated$calibrated_dates[C14_respired_CO2_July_2018_callibrated$calibrated_dates>2018]=2018
C14_respired_CO2_July_2018_callibrated$age=2018.5833-C14_respired_CO2_July_2018_callibrated$calibrated_dates
C14_sugars_July_2018_callibrated=calibrating_F14C_to_calendar_dates(C14_sugars_July_2018, calib_curv)
C14_sugars_July_2018_callibrated$age=2018.5833-C14_sugars_July_2018_callibrated$calibrated_dates
C14_respired_CO2_May_2019_callibrated=calibrating_F14C_to_calendar_dates(C14_respired_CO2_May_2019, calib_curv)
C14_respired_CO2_May_2019_callibrated$calibrated_dates[C14_respired_CO2_May_2019_callibrated$calibrated_dates>2019]=2019
C14_respired_CO2_May_2019_callibrated$age=2019.3332-C14_respired_CO2_May_2019_callibrated$calibrated_dates
C14_sugars_May_2018_averaged_callibrated=calibrating_F14C_to_calendar_dates(C14_sugars_May_2018_averaged, calib_curv)
C14_sugars_May_2018_averaged_callibrated$age=2019.332-C14_sugars_May_2018_averaged_callibrated$calibrated_dates
CO2_NSC_July_2018=merge(C14_respired_CO2_July_2018_callibrated, C14_sugars_July_2018_callibrated, by = c("Id"))
CO2_NSC_May_2019=merge(C14_respired_CO2_May_2019_callibrated, C14_sugars_May_2018_averaged_callibrated, by="Id")
str(CO2_NSC_July_2018)
ggplot(CO2_NSC_July_2018)+
geom_point(aes(y=age.x, x=age.y, col=species.x))+
geom_abline(slope=1)+
ylim(0, 50)+xlim(0, 50)+
geom_text(aes(y=age.x, x=age.y, label=Id))
str(CO2_NSC_July_2018)
ggplot(CO2_NSC_May_2019)+
geom_point(aes(y=age.x, x=age.y, col=species.x))+
geom_abline(slope=1)+
ylim(0, 55)+xlim(0, 55)+
geom_text(aes(y=age.x, x=age.y, label=Id))
stack_july_may=rbind(CO2_NSC_July_2018, CO2_NSC_May_2019)
ggplot(stack_july_may)+
geom_point(aes(y=age.x, x=age.y, shape=Date.x, color=species.x), size=4)+
geom_abline(slope=1)+
ylim(0, 40)+xlim(0, 40)+
ylab("Age respired CO2")+xlab("Age soluble carbon")+
geom_text(aes(y=age.x, x=age.y, label=Id))+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)))
sweeden_trees_2020=read.csv("Boaz_14C_data/sweeden_trees.csv",
header = T, sep = ",")
calib_curv=filter(Hua2021$NHZone1, Year>1964)
max(calib_curv[,4])
min(calib_curv[,4])
last(calib_curv)
calib_curve_post2019=filter(calib_curv, Year>2000)
plot(calib_curv$Year, calib_curv$mean.F14C)
plot(calib_curve_post2019$Year, calib_curve_post2019$mean.Delta14C)
calib_curve_post2019[nrow(calib_curve_post2019)+1, ]=c(2022, -10.1, 2, 0.9899, 0.002)
plot(calib_curve_post2019$Year, calib_curve_post2019$mean.Delta14C)
lm_model_calibration_post2019=lm(Year~mean.Delta14C, data = calib_curve_post2019)
plot(calib_curve_post2019$Year, calib_curve_post2019$mean.Delta14C)
lines(predict.lm(lm_model_calibration_post2019,
newdata = list(mean.Delta14C=seq(min(calib_curve_post2019$mean.Delta14C), max(calib_curve_post2019$mean.Delta14C))))
, seq(min(calib_curve_post2019$mean.Delta14C), max(calib_curve_post2019$mean.Delta14C)), col="red")
predict.lm(lm_model_calibration_post2019,
newdata = list(mean.Delta14C=c(-12, -11, -10, -9, -8,-7, -6, -5)))
sweeden_trees_2020=sweeden_trees_2020%>%filter(!Respired_D14C< -6)
str(sweeden_trees_2020)
# i=1
sweeden_trees_2020$Respiration_calibrated_dates=NA
for(i in 1:nrow(sweeden_trees_2020)){
possible_Dates=filter(calib_curv, mean.Delta14C>sweeden_trees_2020[i,c("Respired_D14C")]-2 & mean.Delta14C<sweeden_trees_2020[i,c("Respired_D14C")]+2)
if(nrow(possible_Dates)==0){
sweeden_trees_2020$Respiration_calibrated_dates[i]=2018.9643-0.2224*sweeden_trees_2020$Respired_D14C[i]
}else{
sweeden_trees_2020$Respiration_calibrated_dates[i]=mean(possible_Dates[,1])
}
}
sweeden_trees_2020$sugars_calibrated_dates=NA
for(i in 1:nrow(sweeden_trees_2020)){
possible_Dates=filter(calib_curv, mean.Delta14C>sweeden_trees_2020[i,c("Sugars_D14C_permil")]-2 & mean.Delta14C<sweeden_trees_2020[i,c("Sugars_D14C_permil")]+2)
if(nrow(possible_Dates)==0){
sweeden_trees_2020$sugars_calibrated_dates[i]=2018.9643-0.2224*sweeden_trees_2020$Sugars_D14C_permil[i]
}else{
sweeden_trees_2020$sugars_calibrated_dates[i]=mean(possible_Dates[,1])
}
}
names(sweeden_trees_2020)
sweeden_trees_2020$age_respired=2020.299-sweeden_trees_2020$Respiration_calibrated_dates
sweeden_trees_2020$age_sugars=2020.299-sweeden_trees_2020$sugars_calibrated_dates
sweeden_trees_2020$ages_ratio=sweeden_trees_2020$age_respired/sweeden_trees_2020$age_sugars
sweeden_trees_2020%>%filter(ages_ratio>1)
ggplot(sweeden_trees_2020)+
geom_point(aes(x=age_sugars, y=age_respired, color=Species))+
geom_abline(slope=1)+
ylim(0, 20)+xlim(0, 20)+
ylab("Are respired CO2")+xlab("age soluble carbon")+
facet_wrap(Organ~Level)+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)))
sweeden_trees_2020
ggplot(sweeden_trees_2020)+
geom_point(aes(x=age_sugars, y=age_respired, color=Species))+
geom_abline(slope=1)+
ylim(0, 20)+xlim(0, 20)+
facet_wrap(~Organ)
ggplot(sweeden_trees_2020)+
geom_point(aes(x=age_sugars, y=age_respired, color=Species))+
geom_abline(slope=1)+
ylim(0, 20)+xlim(0, 20)+
ylab(expression(paste("Are respired", " CO"[2])))+
xlab("age soluble carbon")+
facet_wrap(~Organ)+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)))
ggplot(sweeden_trees_2020)+
geom_point(aes(x=age_sugars, y=age_respired, color=Species))+
geom_abline(slope=1)+
ylim(0, 20)+xlim(0, 20)+
ylab(expression(paste("Age of respired", " CO"[2])))+
xlab("age soluble carbon")+
facet_wrap(~Organ)+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)))
ggplot(sweeden_trees_2020)+
geom_point(aes(x=age_sugars, y=age_respired, color=Species), size=3)+
geom_abline(slope=1)+
ylim(0, 25)+xlim(0, 25)+
ylab(expression(paste("Age of respired", " CO"[2])))+
xlab("age soluble carbon")+
facet_wrap(~Organ)+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)),
strip.text.x = element_text(size = rel(2.5)))
png("Sweeden_trees_branch_fineroots.png",
width=800,
height = 600)
ggplot(sweeden_trees_2020)+
geom_point(aes(x=age_sugars, y=age_respired, color=Species), size=3)+
geom_abline(slope=1)+
ylim(0, 25)+xlim(0, 25)+
ylab(expression(paste("Age of respired", " CO"[2])))+
xlab("age soluble carbon")+
facet_wrap(~Organ)+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)),
strip.text.x = element_text(size = rel(2.5)))
dev.off()
png("Tanguro_trees_wet_dry_season.png",
width=800,
height = 600)
ggplot(stack_july_may)+
geom_point(aes(y=age.x, x=age.y, shape=Date.x, color=species.x), size=4)+
geom_abline(slope=1)+
ylim(0, 40)+xlim(0, 40)+
ylab(expression(paste("Age of respired", " CO"[2])))+
xlab("Age soluble carbon")+
geom_text(aes(y=age.x, x=age.y, label=Id))+
theme_bw()+
theme(axis.text.x=element_text(size = rel(2.5)),
axis.text.y=element_text(size = rel(2.5)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
legend.key = element_rect(size=rel(2.5)),
legend.text = element_text(size=rel(2.5)),
legend.title = element_text(size = rel(2.5)))
dev.off()
