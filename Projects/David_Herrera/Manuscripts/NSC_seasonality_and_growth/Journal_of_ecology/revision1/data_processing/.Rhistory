Sac_profile_data_May_2019=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
Sac_profile_data_May_2019_means=profile_means(Sac_profile_data_May_2019)
ggplot(Sac_profile_data_May_2019_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
## Aug_2019 ##
setwd(file.path(fixed_path,"Sac/Aug2019/rad_gradient/automatic_measurements"))
Sac_profile_data_Aug_2019=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
Sac_profile_data_Aug_2019_means=profile_means(Sac_profile_data_Aug_2019)
ggplot(Sac_profile_data_Aug_2019_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
## Nov_2019 ##
setwd(file.path(fixed_path,"Sac/Nov2019/rad_gradient/automatic_measurements"))
Sac_profile_data_Nov_2019=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
Sac_profile_data_Nov_2019_means=profile_means(Sac_profile_data_Nov_2019)
ggplot(Sac_profile_data_Nov_2019_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
## Feb_2020 ##
setwd(file.path(fixed_path,"Sac/Feb2020/rad_gradient/automatic_measurements"))
Sac_profile_data_Feb_2020=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
Sac_profile_data_Feb_2020_means=profile_means(Sac_profile_data_Feb_2020)
ggplot(Sac_profile_data_Feb_2020_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
########### Ocotea guianensis (Lprat)###############################################################
###############################################################
## jul18 ##
setwd(file.path(fixed_path,"Lprata/Jul2018/rad_gradient/automatic_measurements2"))
Lprata_profile_data_Jul18=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
Lprata_profile_data_Jul18_means=profile_means(Lprata_profile_data_Jul18)
ggplot(Lprata_profile_data_Jul18_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
########### Trattinickia burserifolia (Sbbranc)###############################################################
###############################################################
## jul18 ##
setwd(file.path(fixed_path,"Sbbranc/Jul2018/rad_gradient/automatic_measurements"))
Sbbranc_profile_data_Jul18=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
Sbbranc_profile_data_Jul18_means=profile_means(Sbbranc_profile_data_Jul18)
ggplot(Sbbranc_profile_data_Jul18_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
########### Trattinickia glaziovii (sbnha)###############################################################
###############################################################
## jul18 ##
setwd(file.path(fixed_path,"sbnha/Jul2018/rad_gradient/automatic_measurements"))
sbnha_profile_data_Jul18=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
sbnha_profile_data_Jul18_means=profile_means(sbnha_profile_data_Jul18)
ggplot(sbnha_profile_data_Jul18_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
########### tapirira guianensis (tap)###############################################################
###############################################################
## jul18 ##
setwd(file.path(fixed_path,"tap/Jul2018/rad_gradient/automatic_measurements"))
tap_profile_data_Jul18=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
tap_profile_data_Jul18_means=profile_means(tap_profile_data_Jul18)
ggplot(tap_profile_data_Jul18_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
########### vochysia guianensis (vchy)###############################################################
###############################################################
## jul18 ##
setwd(file.path(fixed_path,"vchy/Jul2018/rad_gradient/automatic_measurements"))
vchy_profile_data_Jul18=read_profile_data_from_csv(listpaths=Sys.glob("Summary_starch_*.csv"))
vchy_profile_data_Jul18_means=profile_means(vchy_profile_data_Jul18)
ggplot(vchy_profile_data_Jul18_means, aes(x=as.numeric(depth_mm), y=mean, col=ID))+geom_line()+
facet_wrap(~measurement_type, scales = "free")
wilcox.test(Speciesdata$growth_rates_cm.year.~Speciesdata$lipid_prescence)
sqrt(0.80)
getwd()
21.5/27.9
27.9/21.5
185/(12*6)
2.5*0.44
2.4/1.5
1.6*0.5
1600/9
wood_age=seq(0, 50 , 1)
NSC_age=seq(0,50, 1)
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()
library(ggplot2)
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown")
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown")+
xlab("NSC mean age")+ylab(expression(paste("respired", "CO"[2], "mean age")))+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown")+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Trees undes favorable conditions")
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Trees undes favorable conditions")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Trees under favorable conditions")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=0.2, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("starving trees")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("starving trees")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1, col="brown", lwd=3, alpha=0.4)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("starving trees")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1, col="brown", lwd=3, alpha=0.6)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("starving trees")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1, col="brown", lwd=3, alpha=0.6)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Starving trees")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3, alpha=0.6)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3, alpha=0.9)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
ggplot(data.frame(wood_age, NSC_age),aes(x=wood_age, y=NSC_age))+geom_point()+
geom_abline(slope=1.6, col="brown", lwd=3)+
xlab("NSC mean age")+ylab(expression(paste("respired ", "CO"[2], " mean age")))+
ggtitle("Trees living only out of the old reserves")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(2.5)),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size = rel(3)),
legend.key = element_rect(size = rel(2)),
#legend.position="none",
plot.title = element_text(size = rel(2.5), face = "italic"))
30/4
24*100/1000
60*100/3000
13*100/500
money_to_Transfer=1000
rate_of_change=4363
wise_fee=money_to_Transfer*0.025
wise_fee
word_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer
world_remit_rate_of_change=4286
world_remit_fee-1.99
wise_rate_of_change=rate_of_change
money_to_Transfer=1000
rate_of_change=4363
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
word_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer
word_remit_cost_pesos
rate_of_change - world_remit_rate_of_change
word_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
word_remit_cost_pesos
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_cost_euros
money_to_Transfer-world_remit_fee
world_remit_moeny_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
world_remit_moeny_in_banck
money_to_Transfer=1000
rate_of_change=4363
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
money_in_banck=as.data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck
money_to_Transfer=4000
rate_of_change=4363
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck
rate_of_change=4365
world_remit_rate_of_change=4286
world_remit_fee=1.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck)
money_in_banck
money_to_Transfer=2000
rate_of_change=4540
world_remit_rate_of_change=4414
world_remit_fee=2.99
wise_rate_of_change=rate_of_change
wise_fee=money_to_Transfer*0.025
banck_rate_of_change=rate_of_change
bank_fees=36
remitly_rate_of_change=4442
remitly_fees=2.99
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(1.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
world_remit_cost_pesos=(rate_of_change - world_remit_rate_of_change)*money_to_Transfer+(2.99*rate_of_change)
world_remit_cost_euros=world_remit_cost_pesos/rate_of_change
world_remit_money_in_banck=(money_to_Transfer-world_remit_fee)*world_remit_rate_of_change
wise_cost_pesos=wise_fee*rate_of_change
wise_money_in_banck= (money_to_Transfer-wise_fee)*rate_of_change
bank_cost_pesos=bank_fees*rate_of_change
bank_money_in_banck= (money_to_Transfer - bank_fees)*rate_of_change
remitly_cost_pesos=(rate_of_change - remitly_rate_of_change)*money_to_Transfer+(remitly_fees*rate_of_change)
remitly_cost_euros=remitly_cost_pesos/rate_of_change
remitly_money_in_bank=(money_to_Transfer-remitly_fees)*remitly_rate_of_change
money_in_banck=data.frame(world_remit=world_remit_money_in_banck,
wise=wise_money_in_banck,
bank=bank_money_in_banck,
remitly=remitly_money_in_bank)
money_in_banck
wilcox.test?
?wilcox.test
install.packages(c("backports", "bayestestR", "BH", "bitops", "boot", "brew", "brio", "broom", "Cairo", "callr", "car", "carData", "caTools", "chron", "class", "clipr", "cluster", "coda", "codetools", "colorspace", "commonmark", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "desc", "deSolve", "devtools", "diffobj", "digest", "doSNOW", "dplR", "dplyr", "DT", "effectsize", "ellipsis", "evaluate", "expm", "fansi", "farver", "FME", "forcats", "foreach", "formatR", "fs", "generics", "ggfortify", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggsignif", "gh", "git2r", "glue", "goftest", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "insight", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lme4", "lubridate", "magick", "magrittr", "maptools", "markdown", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "minpack.lm", "minqa", "modelr", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "overlapping", "parameters", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "polynom", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcarbon", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "remotes", "reprex", "reshape2", "rex", "rio", "rlang", "rmarkdown", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstatix", "rstudioapi", "rversions", "rvest", "scales", "selectr", "sensitivity", "sessioninfo", "sets", "shiny", "signal", "snow", "sourcetools", "sp", "SparseM", "spatial", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tiff", "tinytex", "usethis", "utf8", "viridis", "viridisLite", "waldo", "webshot", "whisker", "withr", "xfun", "XML", "xml2", "yaml", "zip"))
library(tidyverse)
library(dplyr)
library(dplyrUtil, quietly = TRUE)
library(ggplot2)
library(lme4)
library(nlme)
library(broom)
library(ggpubr)
library(rstatix)
library(reshape2)
###reading the data of parenchyma and starch out of the ImageJ files
source("/Users/_dherrera/SOIL-R/Theses//David_Herrera/R_function_stat_smooth.R")
source("/Users/_dherrera/SOIL-R/Theses/David_Herrera/NSC_dynamics_TT_age_and_seasonality/calculations/functions.R")
setwd("/Users/_dherrera/Documents/balzan_project/Manuscript_submissions/NSC_seasonality_and_growth/Journal_of_ecology/revision1/data_processing/")
load("growth_data_tanguro_2018_2020.RData")
load("ab_profile_data")
names(ab_profile_data_Jan18)
str(ab_profile_data_Jan18)
names(ab_profile_data_Feb20)
ab_May19=ab_profile_data_May19%>%select("ID", "depth_mm", "measurement_type", "X.Area", "sampling_month", "month")
ab_Aug19=ab_profile_data_Aug19%>%select("ID", "depth_mm", "measurement_type", "X.Area", "sampling_month", "month")
ab_Nov19=ab_profile_data_Nov19%>%select("ID", "depth_mm", "measurement_type", "X.Area", "sampling_month", "month")
ab_feb19=ab_profile_data_Feb20%>%select("ID", "depth_mm", "measurement_type", "X.Area", "sampling_month", "month")
Ab=rbind(ab_May19, ab_Aug19, ab_Nov19, ab_feb19)
Ab$ID[which(Ab$ID=="ab34283 1")]="ab34288 1"
Ab=Ab%>%separate(ID, c("ID", "radii_No"), sep=" ")
Ab_woodStarch=filter(Ab, measurement_type=="woodStarch")
Ab_woodStarch$depth_mm=as.numeric(Ab_woodStarch$depth_mm)
str(Ab_woodStarch)
Ab_woodStarch=Ab_woodStarch %>% group_by(ID, month)%>%
mapGroups(function(groups_ID){
max_depth_spp=max(Ab_woodStarch$depth_mm)
max_depth_grou=max(groups_ID$depth_mm)
while(max_depth_grou<max_depth_spp){
i=length(groups_ID$depth_mm)
groups_ID[c(i+1, i+2, i+3), "depth_mm"]=max(groups_ID$depth_mm)+5
groups_ID$ID[c(i+1, i+2, i+3)]=groups_ID$ID[1]
groups_ID$measurement_type="woodStarch"
groups_ID$month=groups_ID$month[1]
groups_ID$sampling_month[c(i+1, i+2, i+3)]=groups_ID$sampling_month[1]
max_depth_grou=max(groups_ID$depth_mm)
}
groups_ID$X.Area[is.na(groups_ID$X.Area)]=0
return(groups_ID)
}
)%>%ungroup()
ab_check_filling=Ab_woodStarch%>%filter(depth_mm=="60")
save(Ab_woodStarch, file = "Ab_woodStarch.Rda")
save(Ab_woodStarch, file = "Ab_woodStarch.csv")
Ab_woodStarch_means_by_tree=Ab_woodStarch%>%group_by(ID, depth_mm, month, sampling_month)%>%
summarize(mean_starch_area=mean(X.Area, na.rm=T),
median_starch_are=median(X.Area, na.rm=T),
Int_quart_range=IQR(X.Area, na.rm=T),
sd_starch_area=sd(X.Area, na.rm=T),
sterr=var(X.Area, na.rm=T)/sqrt(length(X.Area)))
Ab_woodStarch_means_by_specie=Ab_woodStarch%>%group_by(depth_mm, month, sampling_month)%>%
summarize(mean_starch_area=mean(X.Area, na.rm=T),
median_starch_are=median(X.Area, na.rm=T),
Int_quart_range=IQR(X.Area, na.rm=T),
sd_starch_area=sd(X.Area, na.rm=T),
sterr=var(X.Area, na.rm=T)/sqrt(length(X.Area)))
Ab_woodStarch_means_by_tree$month=factor(Ab_woodStarch_means_by_tree$month,
levels = c("May19", "Aug19", "Nov19", "Feb20"))
Ab_woodStarch_means_by_specie$month=factor(Ab_woodStarch_means_by_specie$month,
levels = c("May19", "Aug19", "Nov19", "Feb20"))
Ab_woodStarch_means_by_specie$month_season=Ab_woodStarch_means_by_specie$month
library(plyr)
months=unique(Ab_woodStarch_means_by_specie$month)
months_season=c("May 19 (transition)", "Aug 19 (Dry season)", "Nov 19 (transition)", "Feb 20 (wet season)")
Ab_woodStarch_means_by_specie$month_season=mapvalues(Ab_woodStarch_means_by_specie$month_season,
months,
months_season)
detach("package:plyr", unload=TRUE)
Ab_woodStarch_means_by_specie$month_season=factor(Ab_woodStarch_means_by_specie$month_season,
labels = c("May 19 (transition)",
"Aug 19 (Dry season)",
"Nov 19 (transition)",
"Feb 20 (wet season)"))
ggplot()+
geom_line(data=Ab_woodStarch_means_by_specie , aes(x=depth_mm, y=mean_starch_area, col=month_season), size=1)+
geom_ribbon(data=Ab_woodStarch_means_by_specie, aes(x=depth_mm,
ymin=mean_starch_area-sd_starch_area,
ymax=mean_starch_area+sd_starch_area,
fill= month_season),
#fill="gray80",
alpha=0.1)+
ggtitle("O. leucoxylon\n(evergreen/parenchyma-storing-species)")+
xlab("depth (mm)")+ylab("starch %")+
labs(color="Seasons", fill="Seasons")+
theme_bw()+
theme(axis.text.x=element_text(size = rel(3)),
axis.text.y=element_text(size = rel(3)),
axis.title.x = element_text(size = rel(2.5)),
axis.title.y = element_text(size = rel(2.5)),
strip.text = element_text(size = rel(3)),
legend.key.size = unit(1, "cm"),
legend.text = element_text(size = rel(3)),
legend.title = element_text(size = rel(3)),
#legend.position="none",
plot.title = element_text(size = rel(3), face = "italic"))
